
@{
    ViewBag.Title = "SpecificCourse";
}
<script src="~/Scripts/jquery-confirm.min.js"></script>
<div class="row add-margin-top">
    <div class="col-md-6">
        <h2>@Model.courseCode @Model.courseNumber</h2>
        <h4>@ViewData["CurrentSemesterString"]</h4>
        @Html.ActionLink("Back to Courses", "Courses", ViewData["CurrentSemester"])
    </div>
</div>
<hr />
<div class="row">

    <!-- TODO: Add "Weighted Grade" label. -->
    <!-- TODO: Add "COMPLETE COURSE RESET" button -->


    <!-- WORK ITEMS LIST SECTION -->
    <div class="col-lg-5">
            <!-- List Title -->
            <div class="col-md-8 add-margin-bottom">
                <h4 style="display: inline;">Work Items</h4>
            </div>

            <!-- Add WorkItem button -->
            <div class="col-md-4">
                <a href="@Url.Action("AddWorkItem", "Gradebook", Model)" class="btn btn-primary" id="addWorkItemButton">Add Work Item</a>
            </div>

        <!-- list-group of WorkItems -->
            <div class="list-group workItemGroup col-lg-12">
                @{
                    var workItemList = ViewData["AssociatedWorkItems"] as List<GradeTracker.Models.WorkItemModel>;
                    foreach(var workItem in workItemList)
                    {
                        <div class="workItemEntry col-md-12" data-id="@workItem.categoryName">
                            <a href="@Url.Action("SpecificWorkItem", "Gradebook", workItem)" class="list-group-item clearfix">
                            @workItem.itemName
                                <span class="pull-right">@workItem.pointsEarned/@workItem.pointsPossible</span>
                                <br />
                                <span class="pull-left categorySubtitle">@workItem.categoryName</span>
                                </a>
                        </div>
                    }
                }
            </div>
    </div>

    <!-- CURRENT WEIGHT CATEGORY SECTION -->
    <div class="col-lg-3 categorySection">
        <div class="col-sm-12 add-margin-bottom">
            <h4 style="display: inline;">Current Categories: <span id="weightTotalLabel"></span></h4>
        </div>
        <div class="list-group categoryList col-sm-12">
            @{
                var categories = ViewData["AssociatedCategoryWeights"] as List<GradeTracker.Models.CategoryWeight>;
                <!-- No categories error stays hidden until necessary -->
                <p class="error" id="noCategoriesError" hidden>You must add grading weights totaling 100% before adding any work items.</p>
                foreach(var category in categories)
                {
                    <div class="list-group-item categoryEntry" data-id="@category.categoryId">@category.categoryName - @category.categoryWeight %<span class="remove-icon glyphicon glyphicon-remove-circle pull-right"></span></div>
                }
            }
        </div>
        <div class="col-md-12">
            <p id="deleteCategoryError" class="error text-center"></p>
        </div>
    </div>

    <!-- ADD WEIGHT CATEGORY SECTION -->
    <div class="col-lg-4">
            <div class="row">
                <!-- List Title -->
                <div class="col-md-6 add-margin-bottom">
                    <h4 style="display: inline;">Weight Categories</h4>
                </div>
            </div>

            <div class="form-horizontal">
                <div class="col-md-12 form-group">
                    @Html.Label("Name", htmlAttributes: new { @class = "control-label"})
                    @Html.TextBox("categoryNameBox", "", htmlAttributes: new { @class="form-control "})
                </div>
                <div class="col-md-12 form-group">
                    @Html.Label("Weight", htmlAttributes: new { @class = "control-label"})
                    @Html.TextBox("categoryWeightBox", "", htmlAttributes: new { @class="form-control", @type="number"})
                </div>

                <div class="btn btn-default col-md-5 col-md-offset-2 addCategoryButton">Add New Category</div>
            </div>
            <div class="row text-center">
                <div class="col-md-5 col-sm-offset-2 statusLabel">
                    <div class="success" id="successLabel" style="float: left" hidden>Category Added.</div>
                    <div class="error-sm" id="errorLabel" hidden></div>
                </div>
        </div> 
        </div>
</div>

<script>


    /* 
    * Checks if the total weight of all the categories added is 100%.
    */ 
    $(document).ready(function() {
        if($('categoryList').children().length <= 1) {
            $('.noCategoriesError').show();
        }
        setAddWorkItemButtonState(); 
    });



    // Deletes a category entry from the database and removes the div for it.
    $('.categoryList').on('click', '.remove-icon', function() {
       var selectedCategoryId = $(this).parent().attr("data-id");
        // Attempt to delete a category. 
       // Will not succeed if the category is in use by a WorkItem
        $.confirm({
            title: 'Confirm Delete',
            content: 'Are you sure you want to delete this weight category?',
            confirm: function(){
                deleteCategoryAttempt(selectedCategoryId);
             
            },
            cancel: function(){
            }
        });;
    });


    // Deletes the category with the matching categoryId
    function deleteCategory(categoryId) {
        $.ajax({
            type: "POST",
            url: "/Gradebook/DeleteCategoryWeight",
            datatype: "text",
            data: {categoryId: categoryId},
            success: function() {
                $('[data-id="' + categoryId + '"]').remove();
                setAddWorkItemButtonState();
            },
            error: function() {
                alert("ERROR!");
            }
        });
    }

    /*
    * Attempt to delete a category. Makes ajax call to GradebookController to checking
    * if the category that we're trying to delete has been assigned to any work items.
    * If it has, it won't delete the category. 
    */
    function deleteCategoryAttempt(categoryId) {
        var result = false;
        $.ajax({
            type: "POST",
            url: "/Gradebook/CategoryInUse",
            datatype: "text",
            data: {categoryId: categoryId, courseId: @Model.courseId},
            success: function(data) {

                if(data["inUse"] == true) {
                    $('#deleteCategoryError').html("You cannot delete that category, it's being used by one or more work items.").show();
                    $('#deleteCategoryError').fadeOut(4000, function(){});
                }
                else {
                    deleteCategory(categoryId);
                }
            },
            error: function(data) {

                alert(data.status);
            }
        });
        return result;
    }

    /* 
    * Called when the "Add New Category" button is clicked. Validates that the input is not empty,
    * then makes an ajax call to the GradebookController to check the total values of the weights
    * that have already been added to the course. If the new values will cause the total to exceed
    * 100% then the category isn't added an and error is displayed. 
    */
    $('.addCategoryButton').click(function () {
        // Check if either input box is empty.
        if($('#categoryNameBox').val() == "" || $('#categoryWeightBox').val() == "") {
            displayError("Invalid input, there's an empty textbox.");
        }
        else {
            var currentWeightTotal = 0;
            var courseId = @Model.courseId;
            $.ajax({
                type:"POST",
                url: "/Gradebook/GetCurrentWeightTotal",
                datatype: "text",
                data: {courseId: courseId},
                success: function(data) {
                    currentWeightTotal += parseInt(data, 10);
                    // Check if input is a valid integer for Weight.
                    if(Number.isInteger(parseInt($('#categoryWeightBox').val(), 10))) {
                        currentWeightTotal += parseInt($('#categoryWeightBox').val(), 10);
                        // Check if the new category weight value will cause the total to exceed 100%
                        if(currentWeightTotal <= 100) {
                            saveWeight(currentWeightTotal);
                        }
                        else {
                            displayError("Cannot add category, total weight will exceed 100%");
                        }
                    }
                    else {
                        displayError("Invalid input, please try again");
                    }
                },
                error: function(data) {
                        displayError("Sometime went wrong when adding a category.");
                }
            });
        }

    });

    /*
    * Display an error message for 3 seconds beneath submit button.
    */
    function displayError(message){
        $('#errorLabel').html(message).show();
        $("#errorLabel").fadeOut(3000, function () {});
    }

    /* 
    * Make Ajax request to the GradebookController to add a new category weight. This function
    * is called from the 'success' callback when the "Add Category" button is clicked. Therefore
    * the input has been validated and can be added to the database. 
    */
    function saveWeight(currentTotal) {
        var courseId = @Model.courseId;
        var categoryName = $('#categoryNameBox').val();
        var categoryWeight = parseInt($('#categoryWeightBox').val(), 10);
        
        $.ajax({
            type: "POST",
            url: "/Gradebook/SaveNewCategoryWeight",
            datatype: "text",
            data: {courseId: courseId, categoryName: categoryName, categoryWeight: categoryWeight},
            success: function(data) {
                var newCategoryEntry =  "<div class='list-group-item categoryEntry' data-id=" + data['categoryId'] + ">" + data['categoryName'] + " - " + data['categoryWeight'] + "<span class='remove-icon glyphicon glyphicon-remove-circle pull-right'></span> %</div>";
                $('.categoryList').append(newCategoryEntry);

                // Check if this category puts the total at 100%
                setAddWorkItemButtonState();

                // Display success label
                $("#successLabel").show();
                $("#successLabel").fadeOut(3000, function() {
                });


                // Clear input boxes
                $('#categoryNameBox').val("");
                $('#categoryWeightBox').val("");
            },
            error: function(data) {
                alert(data.statusText);
            }
        });
    };

    /* 
    * Checks if weight totals equal 100, if so enable the "Add Work Item" button
    * and removes the status messages telling the user they must add more categories.
    */
    function setAddWorkItemButtonState() {
        var courseId = @Model.courseId;
        $.ajax({
            type: "POST",
            url: "/Gradebook/GetCurrentWeightTotal",
            datatype: "text",
            data: {courseId: courseId},
            success: function(data) {
                // Update the weight total displayed in the section header
                $('#weightTotalLabel').html(parseInt(data,10) + "%");
                if(parseInt(data, 10) != 100) {
                    $('#addWorkItemButton').hide();
                    $('#noCategoriesError').show();
                } 
                else {
                    $('#addWorkItemButton').show();
                    $('#noCategoriesError').hide();
                }
            },
            error: function(data) {
                alert("Error getting current weight total.")
            }
        });
    }

</script>
