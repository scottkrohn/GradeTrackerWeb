@model GradeTracker.Models.WorkItemModel

@{
    ViewBag.Title = "View";
}

<h2>View</h2>


@using (Html.BeginForm("AddWorkItem", "Gradebook", ViewData["currentCourse"], FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true,"", new { @class = "text-danger" })
    <section id="addWorkItemForm">
        <div class="form-horizontal">
            <h4>WorkItemModel</h4>
            <hr />
            <div class="form-group">
                @Html.LabelFor(model => model.itemName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.itemName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.itemName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group hidden">
                @Html.LabelFor(model => model.assocCourseId, htmlAttributes: new { @class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.assocCourseId, new { htmlAttributes = new { @class = "form-control"} })
                    @Html.ValidationMessageFor(model => model.assocCourseId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @{
                    List<SelectListItem> categoryListValues = new List<SelectListItem>();
                    List<GradeTracker.Models.CategoryWeight> categories = ViewData["CategoryWeights"] as List<GradeTracker.Models.CategoryWeight>;
                    foreach(var category in categories)
                    {
                        categoryListValues.Add(new SelectListItem {Text = category.categoryName, Value = category.categoryName});
                    }
                }
                @Html.LabelFor(model => model.categoryName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.categoryName, categoryListValues, "Select Weight Category", htmlAttributes: new { @class="form-control"})
                    @Html.ValidationMessageFor(model => model.categoryName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.pointsPossible, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.pointsPossible, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.pointsPossible, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.pointsEarned, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.pointsEarned, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.pointsEarned, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    </section>
}
<div>
    @Html.ActionLink("Back to Course", "SpecificCourse", ViewData["CurrentCourse"])
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}